{"id":"lgAh","dependencies":[{"name":"D:\\Proyectos\\Face Recognition\\javascript\\.babelrc","includedInParent":true,"mtime":1608830888364},{"name":"D:\\Proyectos\\Face Recognition\\javascript\\package.json","includedInParent":true,"mtime":1614367886134},{"name":"./mvfy-hsv","loc":{"line":3,"column":7},"parent":"D:\\Proyectos\\Face Recognition\\javascript\\mvfy_hsv\\demo.js","resolved":"D:\\Proyectos\\Face Recognition\\javascript\\mvfy_hsv\\mvfy-hsv.js"}],"generated":{"js":"\"use strict\";\n\nvar _mvfyHsv = require(\"./mvfy-hsv\");\n\nconst MODEL = new _mvfyHsv.MvfyHsv({\n  video_input: document.getElementById('video-demo'),\n  min_date_knowledge: '1 day',\n  file_extension: 'xlsx',\n  features: 'all',\n  type_system: 'optimized'\n});\nconsole.log(MODEL); // /**\n//  * Detectar los rostros y etiquetarlos\n//  * \n//  * @param null\n//  * @returns {FaceMatcher}\n//  *  \n//  */\n// const labelsMatchers = async() => {\n//     // face detection\n//     const labels = ['erwing'];\n//     const labeledFaceDescriptors = await Promise.all(\n//         labels.map(async(label, index) => {\n//             // convertir en un HTMLImageElement\n//             const imgUrl = `Images/${label}${index+1}.jpg`;\n//             const img = await faceapi.fetchImage(imgUrl);\n//             // detecta la cara con la puntuación más alta en la imagen \n//             //y calcula sus puntos de referencia y el descriptor de la cara\n//             const fullFaceDescription = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor();\n//             if (!fullFaceDescription) {\n//                 throw new error(`no se han detectado rostros para ${label}`);\n//             }\n//             const faceDescriptors = [fullFaceDescription.descriptor];\n//             console.log(fullFaceDescription)\n//             return new faceapi.LabeledFaceDescriptors(label, faceDescriptors);\n//         }))\n//     const maxDescriptorDistance = 0.7;\n//     return new faceapi.FaceMatcher(labeledFaceDescriptors, maxDescriptorDistance);\n// };\n// // capturamos el evento play\n// video.addEventListener('play', async() => {\n//     // creamos un canvas\n//     const canvas = faceapi.createCanvasFromMedia(video);\n//     document.body.append(canvas);\n//     // le damos un tamaño\n//     const displaySize = { width: video.width, height: video.height };\n//     faceapi.matchDimensions(canvas, displaySize);\n//     // traemos las detecciones\n//     faceMatcher = await labelsMatchers();\n//     // detecciones cada 100 mls\n//     setInterval(async() => {\n//         // detectamos los rostros\n//         const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())\n//             .withFaceLandmarks().withFaceDescriptors();\n//         // redimencionamos las predicciones al tamaño del video\n//         const resizeDetections = faceapi.resizeResults(detections, displaySize);\n//         // limpiamos el canvas anteior\n//         canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n//         // dibujamos las predicciones\n//         // faceapi.draw.drawDetections(canvas, resizeDetections)\n//         // faceapi.draw.drawFaceExpressions(canvas, resizeDetections)\n//         // Detección de rostros\n//         const results = resizeDetections.map(fd => faceMatcher.findBestMatch(fd.descriptor))\n//         results.forEach((bestMatch, i) => {\n//             const box = resizeDetections[i].detection.box\n//             const text = bestMatch.toString()\n//             const drawBox = new faceapi.draw.DrawBox(box, { label: text })\n//             drawBox.draw(canvas)\n//         })\n//     }, 50)\n// })"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"demo.js","original":{"line":1,"column":0}},{"generated":{"line":5,"column":0},"source":"demo.js","original":{"line":5,"column":0}},{"name":"MODEL","generated":{"line":5,"column":6},"source":"demo.js","original":{"line":5,"column":6}},{"generated":{"line":5,"column":11},"source":"demo.js","original":{"line":5,"column":11}},{"generated":{"line":5,"column":14},"source":"demo.js","original":{"line":5,"column":14}},{"name":"MvfyHsv","generated":{"line":5,"column":18},"source":"demo.js","original":{"line":5,"column":18}},{"generated":{"line":5,"column":34},"source":"demo.js","original":{"line":5,"column":14}},{"generated":{"line":5,"column":35},"source":"demo.js","original":{"line":5,"column":26}},{"name":"video_input","generated":{"line":6,"column":0},"source":"demo.js","original":{"line":6,"column":4}},{"name":"video_input","generated":{"line":6,"column":2},"source":"demo.js","original":{"line":6,"column":4}},{"generated":{"line":6,"column":13},"source":"demo.js","original":{"line":6,"column":15}},{"name":"document","generated":{"line":6,"column":15},"source":"demo.js","original":{"line":6,"column":17}},{"generated":{"line":6,"column":23},"source":"demo.js","original":{"line":6,"column":25}},{"name":"getElementById","generated":{"line":6,"column":24},"source":"demo.js","original":{"line":6,"column":26}},{"generated":{"line":6,"column":38},"source":"demo.js","original":{"line":6,"column":17}},{"generated":{"line":6,"column":39},"source":"demo.js","original":{"line":6,"column":41}},{"generated":{"line":6,"column":51},"source":"demo.js","original":{"line":6,"column":17}},{"generated":{"line":6,"column":52},"source":"demo.js","original":{"line":5,"column":26}},{"name":"min_date_knowledge","generated":{"line":7,"column":0},"source":"demo.js","original":{"line":7,"column":4}},{"name":"min_date_knowledge","generated":{"line":7,"column":2},"source":"demo.js","original":{"line":7,"column":4}},{"generated":{"line":7,"column":20},"source":"demo.js","original":{"line":7,"column":22}},{"generated":{"line":7,"column":22},"source":"demo.js","original":{"line":7,"column":24}},{"generated":{"line":7,"column":29},"source":"demo.js","original":{"line":5,"column":26}},{"name":"file_extension","generated":{"line":8,"column":0},"source":"demo.js","original":{"line":8,"column":4}},{"name":"file_extension","generated":{"line":8,"column":2},"source":"demo.js","original":{"line":8,"column":4}},{"generated":{"line":8,"column":16},"source":"demo.js","original":{"line":8,"column":18}},{"generated":{"line":8,"column":18},"source":"demo.js","original":{"line":8,"column":20}},{"generated":{"line":8,"column":24},"source":"demo.js","original":{"line":5,"column":26}},{"name":"features","generated":{"line":9,"column":0},"source":"demo.js","original":{"line":9,"column":4}},{"name":"features","generated":{"line":9,"column":2},"source":"demo.js","original":{"line":9,"column":4}},{"generated":{"line":9,"column":10},"source":"demo.js","original":{"line":9,"column":12}},{"generated":{"line":9,"column":12},"source":"demo.js","original":{"line":9,"column":14}},{"generated":{"line":9,"column":17},"source":"demo.js","original":{"line":5,"column":26}},{"name":"type_system","generated":{"line":10,"column":0},"source":"demo.js","original":{"line":10,"column":4}},{"name":"type_system","generated":{"line":10,"column":2},"source":"demo.js","original":{"line":10,"column":4}},{"generated":{"line":10,"column":13},"source":"demo.js","original":{"line":10,"column":15}},{"generated":{"line":10,"column":15},"source":"demo.js","original":{"line":10,"column":17}},{"generated":{"line":11,"column":0},"source":"demo.js","original":{"line":5,"column":26}},{"generated":{"line":11,"column":1},"source":"demo.js","original":{"line":5,"column":14}},{"generated":{"line":11,"column":2},"source":"demo.js","original":{"line":5,"column":0}},{"name":"console","generated":{"line":12,"column":0},"source":"demo.js","original":{"line":14,"column":0}},{"generated":{"line":12,"column":7},"source":"demo.js","original":{"line":14,"column":7}},{"name":"log","generated":{"line":12,"column":8},"source":"demo.js","original":{"line":14,"column":8}},{"generated":{"line":12,"column":11},"source":"demo.js","original":{"line":14,"column":0}},{"name":"MODEL","generated":{"line":12,"column":12},"source":"demo.js","original":{"line":14,"column":12}},{"generated":{"line":12,"column":17},"source":"demo.js","original":{"line":14,"column":0}},{"generated":{"line":12,"column":20},"source":"demo.js","original":{"line":16,"column":0}},{"generated":{"line":13,"column":0},"source":"demo.js","original":{"line":17,"column":0}},{"generated":{"line":14,"column":0},"source":"demo.js","original":{"line":18,"column":0}},{"generated":{"line":15,"column":0},"source":"demo.js","original":{"line":19,"column":0}},{"generated":{"line":16,"column":0},"source":"demo.js","original":{"line":20,"column":0}},{"generated":{"line":17,"column":0},"source":"demo.js","original":{"line":21,"column":0}},{"generated":{"line":18,"column":0},"source":"demo.js","original":{"line":22,"column":0}},{"generated":{"line":19,"column":0},"source":"demo.js","original":{"line":24,"column":0}},{"generated":{"line":20,"column":0},"source":"demo.js","original":{"line":26,"column":0}},{"generated":{"line":21,"column":0},"source":"demo.js","original":{"line":27,"column":0}},{"generated":{"line":22,"column":0},"source":"demo.js","original":{"line":30,"column":0}},{"generated":{"line":23,"column":0},"source":"demo.js","original":{"line":31,"column":0}},{"generated":{"line":24,"column":0},"source":"demo.js","original":{"line":33,"column":0}},{"generated":{"line":25,"column":0},"source":"demo.js","original":{"line":34,"column":0}},{"generated":{"line":26,"column":0},"source":"demo.js","original":{"line":35,"column":0}},{"generated":{"line":27,"column":0},"source":"demo.js","original":{"line":37,"column":0}},{"generated":{"line":28,"column":0},"source":"demo.js","original":{"line":38,"column":0}},{"generated":{"line":29,"column":0},"source":"demo.js","original":{"line":39,"column":0}},{"generated":{"line":30,"column":0},"source":"demo.js","original":{"line":41,"column":0}},{"generated":{"line":31,"column":0},"source":"demo.js","original":{"line":42,"column":0}},{"generated":{"line":32,"column":0},"source":"demo.js","original":{"line":43,"column":0}},{"generated":{"line":33,"column":0},"source":"demo.js","original":{"line":45,"column":0}},{"generated":{"line":34,"column":0},"source":"demo.js","original":{"line":46,"column":0}},{"generated":{"line":35,"column":0},"source":"demo.js","original":{"line":47,"column":0}},{"generated":{"line":36,"column":0},"source":"demo.js","original":{"line":48,"column":0}},{"generated":{"line":37,"column":0},"source":"demo.js","original":{"line":51,"column":0}},{"generated":{"line":38,"column":0},"source":"demo.js","original":{"line":52,"column":0}},{"generated":{"line":39,"column":0},"source":"demo.js","original":{"line":54,"column":0}},{"generated":{"line":40,"column":0},"source":"demo.js","original":{"line":57,"column":0}},{"generated":{"line":41,"column":0},"source":"demo.js","original":{"line":58,"column":0}},{"generated":{"line":42,"column":0},"source":"demo.js","original":{"line":60,"column":0}},{"generated":{"line":43,"column":0},"source":"demo.js","original":{"line":61,"column":0}},{"generated":{"line":44,"column":0},"source":"demo.js","original":{"line":62,"column":0}},{"generated":{"line":45,"column":0},"source":"demo.js","original":{"line":64,"column":0}},{"generated":{"line":46,"column":0},"source":"demo.js","original":{"line":65,"column":0}},{"generated":{"line":47,"column":0},"source":"demo.js","original":{"line":66,"column":0}},{"generated":{"line":48,"column":0},"source":"demo.js","original":{"line":68,"column":0}},{"generated":{"line":49,"column":0},"source":"demo.js","original":{"line":69,"column":0}},{"generated":{"line":50,"column":0},"source":"demo.js","original":{"line":71,"column":0}},{"generated":{"line":51,"column":0},"source":"demo.js","original":{"line":72,"column":0}},{"generated":{"line":52,"column":0},"source":"demo.js","original":{"line":73,"column":0}},{"generated":{"line":53,"column":0},"source":"demo.js","original":{"line":74,"column":0}},{"generated":{"line":54,"column":0},"source":"demo.js","original":{"line":75,"column":0}},{"generated":{"line":55,"column":0},"source":"demo.js","original":{"line":76,"column":0}},{"generated":{"line":56,"column":0},"source":"demo.js","original":{"line":77,"column":0}},{"generated":{"line":57,"column":0},"source":"demo.js","original":{"line":78,"column":0}},{"generated":{"line":58,"column":0},"source":"demo.js","original":{"line":79,"column":0}},{"generated":{"line":59,"column":0},"source":"demo.js","original":{"line":80,"column":0}},{"generated":{"line":60,"column":0},"source":"demo.js","original":{"line":81,"column":0}},{"generated":{"line":61,"column":0},"source":"demo.js","original":{"line":82,"column":0}},{"generated":{"line":62,"column":0},"source":"demo.js","original":{"line":84,"column":0}},{"generated":{"line":63,"column":0},"source":"demo.js","original":{"line":85,"column":0}},{"generated":{"line":64,"column":0},"source":"demo.js","original":{"line":87,"column":0}},{"generated":{"line":65,"column":0},"source":"demo.js","original":{"line":88,"column":0}},{"generated":{"line":66,"column":0},"source":"demo.js","original":{"line":89,"column":0}},{"generated":{"line":67,"column":0},"source":"demo.js","original":{"line":90,"column":0}},{"generated":{"line":68,"column":0},"source":"demo.js","original":{"line":91,"column":0}},{"generated":{"line":69,"column":0},"source":"demo.js","original":{"line":92,"column":0}},{"generated":{"line":70,"column":0},"source":"demo.js","original":{"line":94,"column":0}},{"generated":{"line":71,"column":0},"source":"demo.js","original":{"line":95,"column":0}}],"sources":{"demo.js":"import {\r\n    MvfyHsv\r\n} from './mvfy-hsv';\r\n\r\nconst MODEL = new MvfyHsv({\r\n    video_input: document.getElementById('video-demo'),\r\n    min_date_knowledge: '1 day',\r\n    file_extension: 'xlsx',\r\n    features: 'all',\r\n    type_system: 'optimized'\r\n});\r\n\r\n\r\nconsole.log(MODEL);\r\n\r\n// /**\r\n//  * Detectar los rostros y etiquetarlos\r\n//  * \r\n//  * @param null\r\n//  * @returns {FaceMatcher}\r\n//  *  \r\n//  */\r\n\r\n// const labelsMatchers = async() => {\r\n\r\n//     // face detection\r\n//     const labels = ['erwing'];\r\n\r\n\r\n//     const labeledFaceDescriptors = await Promise.all(\r\n//         labels.map(async(label, index) => {\r\n\r\n//             // convertir en un HTMLImageElement\r\n//             const imgUrl = `Images/${label}${index+1}.jpg`;\r\n//             const img = await faceapi.fetchImage(imgUrl);\r\n\r\n//             // detecta la cara con la puntuación más alta en la imagen \r\n//             //y calcula sus puntos de referencia y el descriptor de la cara\r\n//             const fullFaceDescription = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor();\r\n\r\n//             if (!fullFaceDescription) {\r\n//                 throw new error(`no se han detectado rostros para ${label}`);\r\n//             }\r\n\r\n//             const faceDescriptors = [fullFaceDescription.descriptor];\r\n//             console.log(fullFaceDescription)\r\n//             return new faceapi.LabeledFaceDescriptors(label, faceDescriptors);\r\n//         }))\r\n\r\n\r\n//     const maxDescriptorDistance = 0.7;\r\n//     return new faceapi.FaceMatcher(labeledFaceDescriptors, maxDescriptorDistance);\r\n\r\n// };\r\n\r\n\r\n// // capturamos el evento play\r\n// video.addEventListener('play', async() => {\r\n\r\n//     // creamos un canvas\r\n//     const canvas = faceapi.createCanvasFromMedia(video);\r\n//     document.body.append(canvas);\r\n\r\n//     // le damos un tamaño\r\n//     const displaySize = { width: video.width, height: video.height };\r\n//     faceapi.matchDimensions(canvas, displaySize);\r\n\r\n//     // traemos las detecciones\r\n//     faceMatcher = await labelsMatchers();\r\n\r\n//     // detecciones cada 100 mls\r\n//     setInterval(async() => {\r\n//         // detectamos los rostros\r\n//         const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())\r\n//             .withFaceLandmarks().withFaceDescriptors();\r\n//         // redimencionamos las predicciones al tamaño del video\r\n//         const resizeDetections = faceapi.resizeResults(detections, displaySize);\r\n//         // limpiamos el canvas anteior\r\n//         canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\r\n//         // dibujamos las predicciones\r\n//         // faceapi.draw.drawDetections(canvas, resizeDetections)\r\n//         // faceapi.draw.drawFaceExpressions(canvas, resizeDetections)\r\n\r\n//         // Detección de rostros\r\n//         const results = resizeDetections.map(fd => faceMatcher.findBestMatch(fd.descriptor))\r\n\r\n//         results.forEach((bestMatch, i) => {\r\n//             const box = resizeDetections[i].detection.box\r\n//             const text = bestMatch.toString()\r\n//             const drawBox = new faceapi.draw.DrawBox(box, { label: text })\r\n//             drawBox.draw(canvas)\r\n//         })\r\n\r\n//     }, 50)\r\n// })"},"lineCount":null}},"error":null,"hash":"a65963077b9ab0abb029e3cd84ec0c2b","cacheData":{"env":{}}}